#!/bin/bash
#
# This script runs when the platform setup the challenge.
#
# The platform determines if the script was successful using the exit code of this
# script. If the exit code is not 0, the script fails. 
#

echo "Setting up the challenge..."

export NAMESPACE=pacman-app
export GIT_REPO_URL=TODO

echo "Create the $NAMESPACE namespace"
oc new-project $NAMESPACE

echo "Install the ArgoCD operator"
cat << EOF | oc apply -f -
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: openshift-gitops-operator
  namespace: openshift-operators
spec:
  name: openshift-gitops-operator
  source: redhat-operators
  sourceNamespace: openshift-marketplace
EOF

# We need the above to complete before deploying an Argo instance.
# Let's set up a simple git server while we wait.
echo "Install a local git server"
useradd git
pushd /home/git
curl -O https://raw.githubusercontent.com/lijcam/Instruqt/3-showcase-openshift-gitops/an-introduction-to-gitops/01-exploring-argocd/content/gogs.tar.gz
tar xzf gogs.tar.gz
chown -R git:git gogs
cp gogs/scripts/systemd/gogs.service /etc/systemd/system/
chown root:root /etc/systemd/system/gogs.service
systemctl daemon-reload
systemctl start gogs.service
popd

echo "Create an ArgoCD instance"
cat << EOF | oc apply -n $NAMESPACE -f -
apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  labels:
    app: argocd
  name: argocd
spec:
  server:
    route:
      enabled: true
EOF

echo "Create an ArgoCD project"
cat << EOF | oc apply -n $NAMESPACE -f -
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: petclinic
spec:
  destinations:
  - name: in-cluster
    namespace: $NAMESPACE
    server: https://kubernetes.default.svc
  sourceRepos:
  - $GIT_REPO_URL
EOF

echo "Create an ArgoCD application"
cat << EOF | oc apply -n $NAMESPACE -f -
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: petclinic
spec:
  destination:
    name: in-cluster
    namespace: $NAMESPACE
  project: petclinic
  source:
    path: ./
    repoURL: $GIT_REPO_URL
  syncPolicy:
    automated:
      selfHeal: true
EOF

exit 0
